{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Escritorio/table_manager/src/main_table.js\";\nimport React from \"react\";\nimport data from './data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getData() {\n  return data;\n}\n/*\nfunction renderHeaders(){\n    let headersText = [\"Region Name\",\n                       \"Region alpha code\",\n                       \"Value\",\n                       \"Reference date\"];\n\n    let headers = [];\n\n    headersText.map((header) => {\n        headers.push(<th> {header} \n                     <a href=\"index.html\"><i class=\"fa\">&#xf040;</i></a> \n                     <a href=\"index.html\"><i class=\"fa\">&#xf014;</i></a> \n                     </th>);\n        return headers; \n    }); \n\n    return headers; \n\n}*/\n\n\nclass MainTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.keypressHandler = event => {\n      if (event.key === \"Enter\") {\n        //this.setState({ value: this.inputRef.current.value });\n        //console.log(this.inputRef);\n        this.setState({\n          focused: false\n        }); //this.inputRef.current.blur();\n        //this.inputRef.current.value = \"\";\n      }\n    };\n\n    this.inputRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      json: [],\n      headersText: [\"Region name\", \"Region alpha code\", \"Value\", \"Reference date\"]\n    };\n  }\n  /*\n  _handleChangeEvent(val) {\n      return val;\n  }*/\n\n\n  renderHeaders() {\n    let headers = [];\n    this.state.headersText.map(header => {\n      console.log(this.inputRef);\n      headers.push( /*#__PURE__*/_jsxDEV(\"th\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" //onChange={(header)=>{this._handleChangeEvent(header);}} \n          //ref={this.inputRef}\n          ,\n          onKeyPress: event => this.keypressHandler(event),\n          defaultValue: header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"index.html\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fa\",\n            children: \"\\uF014\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 26\n      }, this));\n      return headers;\n    });\n    return headers;\n  }\n\n  componentDidMount() {\n    this.setState(prevState => {\n      return {\n        json: getData()\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: this.renderHeaders()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.json.map((data, i) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: data.region_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: data.region_alpha_code\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: data.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: data.ref_date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 29\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MainTable;\n/*\nconst MainTable =()=>{\n\n    function renderHeaders(){\n        let headers = [];\n\n        const dataImport = data[0]; \n        Object.keys(dataImport).map((element,i) => {\n            headers.push(<td key={i.name}>{element}</td>); \n        });\n\n        return headers; \n\n    }\n\n    function renderValues(){\n        let values = [];\n\n        let res = Object.values(data);\n\n        res.map((x, i) => {\n            console.log(res[i]);\n            Object.values(res[i]).map(x => {\n                values.push(<td >{x}</td>);\n                return values;\n            });\n            return values;\n        });\n\n        return values;\n\n    }\n\n        /*\n    const RenderRow = (props) =>{\n        return props.keys.map((key, index)=>{\n        return <td key={props.data[key]}>{props.data[key]}</td>\n        })\n       }\n       \n       \n    getRowsData = function(){\n        var items = this.props.data;\n        var keys = this.getKeys();\n        return items.map((row, index)=>{\n        return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\n        })\n    }\n\n    return(\n    <React.Fragment>\n\n        <p>Table</p>\n        <table>\n            <thead>\n                <tr>{renderHeaders()}</tr>\n            </thead>\n            <tbody>\n                <tr>{renderValues()}</tr>\n            </tbody>                  \n        </table>\n    </React.Fragment> \n    )\n}\n\nexport default MainTable;  */","map":{"version":3,"sources":["/home/gabriel/Escritorio/table_manager/src/main_table.js"],"names":["React","data","getData","MainTable","Component","constructor","props","keypressHandler","event","key","setState","focused","inputRef","createRef","state","json","headersText","renderHeaders","headers","map","header","console","log","push","componentDidMount","prevState","render","i","region_name","region_alpha_code","value","ref_date"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport data from './data.json';\n\nfunction getData() {\n    return data;\n}\n/*\nfunction renderHeaders(){\n    let headersText = [\"Region Name\",\n                       \"Region alpha code\",\n                       \"Value\",\n                       \"Reference date\"];\n\n    let headers = [];\n\n    headersText.map((header) => {\n        headers.push(<th> {header} \n                     <a href=\"index.html\"><i class=\"fa\">&#xf040;</i></a> \n                     <a href=\"index.html\"><i class=\"fa\">&#xf014;</i></a> \n                     </th>);\n        return headers; \n    }); \n\n    return headers; \n\n}*/\n  \nclass MainTable extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.inputRef = React.createRef();\n        this.state = {\n            json: [],\n            headersText: [\"Region name\",\n                          \"Region alpha code\",\n                          \"Value\",\n                          \"Reference date\"]\n        }\n    }\n    /*\n    _handleChangeEvent(val) {\n        return val;\n    }*/\n\n\n    keypressHandler = event => {\n    if (event.key === \"Enter\") {\n        //this.setState({ value: this.inputRef.current.value });\n        //console.log(this.inputRef);\n        this.setState({ focused: false });\n        //this.inputRef.current.blur();\n        //this.inputRef.current.value = \"\";\n    }\n    };\n\n    renderHeaders() {\n        let headers = [];\n        \n        this.state.headersText.map((header) => {\n            console.log(this.inputRef);\n            headers.push(<th>\n                         <input type=\"text\" \n                            //onChange={(header)=>{this._handleChangeEvent(header);}} \n                            //ref={this.inputRef}\n                            onKeyPress={event => this.keypressHandler(event)} \n                            defaultValue={header}/>\n                            \n                         <a href=\"index.html\"><i class=\"fa\">&#xf014;</i></a> \n                         </th>);\n            return headers; \n        }); \n    \n        return headers; \n    \n    }\n\n    componentDidMount() {\n        this.setState((prevState) => {\n            return {\n                json: getData()\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <table>\n                    <thead>\n                        <tr>\n                            {this.renderHeaders()}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.json.map((data, i) => {\n                        return (\n                            <tr key={i}>\n                            <td>{data.region_name}</td>\n                            <td>{data.region_alpha_code}</td>\n                            <td>{data.value}</td>\n                            <td>{data.ref_date}</td>\n                            </tr>\n                        )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default MainTable;\n\n\n\n\n\n\n/*\nconst MainTable =()=>{\n\n    function renderHeaders(){\n        let headers = [];\n\n        const dataImport = data[0]; \n        Object.keys(dataImport).map((element,i) => {\n            headers.push(<td key={i.name}>{element}</td>); \n        });\n\n        return headers; \n\n    }\n\n    function renderValues(){\n        let values = [];\n\n        let res = Object.values(data);\n\n        res.map((x, i) => {\n            console.log(res[i]);\n            Object.values(res[i]).map(x => {\n                values.push(<td >{x}</td>);\n                return values;\n            });\n            return values;\n        });\n\n        return values;\n\n    }\n\n        /*\n    const RenderRow = (props) =>{\n        return props.keys.map((key, index)=>{\n        return <td key={props.data[key]}>{props.data[key]}</td>\n        })\n       }\n       \n       \n    getRowsData = function(){\n        var items = this.props.data;\n        var keys = this.getKeys();\n        return items.map((row, index)=>{\n        return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\n        })\n    }\n\n    return(\n    <React.Fragment>\n\n        <p>Table</p>\n        <table>\n            <thead>\n                <tr>{renderHeaders()}</tr>\n            </thead>\n            <tbody>\n                <tr>{renderValues()}</tr>\n            </tbody>                  \n        </table>\n    </React.Fragment> \n    )\n}\n\nexport default MainTable;  */\n"]},"metadata":{},"sourceType":"module"}