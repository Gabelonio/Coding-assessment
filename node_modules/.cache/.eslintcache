[{"/home/gabriel/Escritorio/table_manager/src/index.js":"1","/home/gabriel/Escritorio/table_manager/src/App.js":"2","/home/gabriel/Escritorio/table_manager/src/reportWebVitals.js":"3","/home/gabriel/Escritorio/table_manager/src/main_table.js":"4"},{"size":543,"mtime":1614335582068,"results":"5","hashOfConfig":"6"},{"size":3748,"mtime":1614547914624,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1614283429592,"results":"8","hashOfConfig":"6"},{"size":4778,"mtime":1614522150078,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1t0oss2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/home/gabriel/Escritorio/table_manager/src/index.js",[],["21","22"],"/home/gabriel/Escritorio/table_manager/src/App.js",["23","24","25","26","27"],"import './App.css';\nimport MainTable from './main_table';\nimport data from './data.json';\nimport React, {useRef,useEffect,useState} from \"react\";\n\nfunction getData() {\n  return data;\n}\n\nfunction App() {\n\n  const headersRef = useRef([]); \n  headersRef.current = []; \n  const rowsRef = useRef([]);\n  rowsRef.current = [];\n\n  var json = getData();\n  const headersText = [\"Region name\",\n                       \"Region alpha code\",\n                       \"Value\",\n                       \"Reference date\"];\n\n  var informationTable = [];\n  var infoRow = []; \n\n  json.map((data) => {\n    infoRow.push(data.region_name);\n    infoRow.push(data.region_alpha_code);\n    infoRow.push(data.value);\n    infoRow.push(data.ref_date);\n    informationTable.push(infoRow);\n    infoRow = []; \n  });\n\n  var isReorderActive = false;\n  var infoOrigin = [];\n  var posOrigin; \n  var infoDestiny = [];\n  var posDestiny;\n\n\n  const addHeaderToRefs = (el) =>{\n    if(el!=null){\n      headersRef.current.push(el);\n    }\n    //console.log(headersRef.current);\n  };\n\n  const addRowToRefs = (el) =>{\n    if(el!=null){\n      rowsRef.current.push(el);\n    }\n    //console.log(rowsRef.current);\n  };\n          \n  const renderHeaders = () => {\n    //HERE IS A LET !!!!!!!!!!!!!!!!!!!!!!!!\n    let headers = [];\n    headersText.map((header,i) => {\n        headers.push(<th ref={addHeaderToRefs}>\n                     <input type=\"text\" \n                        //onChange={(header)=>{this._handleChangeEvent(header);}} \n                        onKeyPress={event => keypressHandler(event,i)} \n                        defaultValue={header}/>\n                     <a href=\"#\" onClick={handleReorderColumns(i)}>\n                         <i class=\"fa\">&#xf014;</i></a> \n                     </th>);\n        return headers; \n    }); \n    return headers;\n  }\n\n  const keypressHandler = (event,currentPos) => {\n    if (event.key === \"Enter\") {\n        //this.setState({ value: this.inputRef.current.value });\n        //console.log(Array.from(this.headersRef.current.cells));\n        //headersRef.current[currentPos].childNodes[0].blur();\n        //this.inputRef.current.blur();\n        //this.inputRef.current.value = \"\";*/\n    }\n  };\n\n  const handleReorderColumns = (currentPos) => {\n    console.log(rowsRef);\n    if(isReorderActive){\n      posDestiny = currentPos;\n      reOrderColumns(posOrigin,posDestiny);\n      isReorderActive = false; \n    }else{\n      posOrigin = currentPos;\n      isReorderActive = true; \n    }\n  }\n\n  function reOrderColumns(posOrigin,posDestiny){\n    infoOrigin = getInformationColumn(posOrigin);\n    infoDestiny = getInformationColumn(posDestiny);\n    for(var i = 0; i < informationTable.length; i++){\n      rowsRef.current[i].cells[posOrigin].innerText = infoDestiny[i];\n      rowsRef.current[i].cells[posDestiny].innerText = infoOrigin[i];\n      informationTable[i][posOrigin] = infoDestiny[i];\n      informationTable[i][posDestiny] = infoOrigin[i];\n    }\n  };\n\n  function getInformationColumn(currentPos){\n    var selectedInformation = [];\n    for(var i = 0; i < informationTable.length; i++){\n      selectedInformation.push(informationTable[i][currentPos]);\n    }\n    return selectedInformation;\n  };\n\n  return (\n    <div className=\"App\">\n      <table>\n        <thead>\n          <tr ref={headersRef}>\n              {renderHeaders()}\n          </tr>\n        </thead>\n        <tbody>\n          { informationTable.map((data, i) => {\n            return (\n                <tr key={i} ref={addRowToRefs}>\n                <td>{data[0]}</td>\n                <td>{data[1]}</td>\n                <td>{data[2]}</td>\n                <td>{data[3]}</td>\n                </tr>\n            )\n          })}\n        </tbody>\n      </table>  \n    </div>\n  );\n}\n\nexport default App;\n","/home/gabriel/Escritorio/table_manager/src/reportWebVitals.js",[],"/home/gabriel/Escritorio/table_manager/src/main_table.js",["28","29"],"import React from \"react\";\nimport data from './data.json';\n\nfunction getData() {\n    return data;\n}\n/*\nfunction renderHeaders(){\n    let headersText = [\"Region Name\",\n                       \"Region alpha code\",\n                       \"Value\",\n                       \"Reference date\"];\n\n    let headers = [];\n\n    headersText.map((header) => {\n        headers.push(<th> {header} \n                     <a href=\"index.html\"><i class=\"fa\">&#xf040;</i></a> \n                     <a href=\"index.html\"><i class=\"fa\">&#xf014;</i></a> \n                     </th>);\n        return headers; \n    }); \n\n    return headers; \n\n}*/\n  \n\n\n          \nclass MainTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.headersRef = React.createRef();\n        \n        this.state = {\n            json: [],\n            headersText: [\"Region name\",\n                          \"Region alpha code\",\n                          \"Value\",\n                          \"Reference date\"]\n        }\n    }\n    /*\n    _handleChangeEvent(val) {\n        return val;\n    }*/\n\n\n    keypressHandler = event => {\n        if (event.key === \"Enter\") {\n            //this.setState({ value: this.inputRef.current.value });\n            //console.log(Array.from(this.headersRef.current.cells));\n            Array.from(this.headersRef.current.cells).map((textInput) => {\n                //textInput.setState\n                textInput.childNodes[0].blur();\n            });\n            return null;\n            //this.inputRef.current.blur();\n            //this.inputRef.current.value = \"\";\n        }\n    };\n\n    selectOrderColumn= () => {\n\n        return console.log(this.contentRef.current.children);\n    };\n\n    renderHeaders() {\n        let headers = [];\n        this.state.headersText.map((header,i) => {\n            headers.push(<th>\n                         <input type=\"text\" \n                            //onChange={(header)=>{this._handleChangeEvent(header);}} \n                            onKeyPress={event => this.keypressHandler(event)} \n                            defaultValue={header}/>\n                         <a href=\"#\" onClick={this.selectOrderColumn}>\n                             <i class=\"fa\">&#xf014;</i></a> \n                         </th>);\n            return headers; \n        }); \n    \n        return headers; \n    \n    }\n\n    componentDidMount() {\n        this.setState((prevState) => {\n            return {\n                json: getData()\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <table>\n                    <thead>\n                        <tr ref={this.headersRef}>\n                            {this.renderHeaders()}\n                        </tr>\n                    </thead>\n                    <tbody ref={this.contentRef}>\n                        {this.state.json.map((data, i) => {\n                        return (\n                            <tr key={i}>\n                            <td>{data.region_name}</td>\n                            <td>{data.region_alpha_code}</td>\n                            <td>{data.value}</td>\n                            <td>{data.ref_date}</td>\n                            </tr>\n                        )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default MainTable;\n\n\n\n\n\n\n/*\nconst MainTable =()=>{\n\n    function renderHeaders(){\n        let headers = [];\n\n        const dataImport = data[0]; \n        Object.keys(dataImport).map((element,i) => {\n            headers.push(<td key={i.name}>{element}</td>); \n        });\n\n        return headers; \n\n    }\n\n    function renderValues(){\n        let values = [];\n\n        let res = Object.values(data);\n\n        res.map((x, i) => {\n            console.log(res[i]);\n            Object.values(res[i]).map(x => {\n                values.push(<td >{x}</td>);\n                return values;\n            });\n            return values;\n        });\n\n        return values;\n\n    }\n\n        /*\n    const RenderRow = (props) =>{\n        return props.keys.map((key, index)=>{\n        return <td key={props.data[key]}>{props.data[key]}</td>\n        })\n       }\n       \n       \n    getRowsData = function(){\n        var items = this.props.data;\n        var keys = this.getKeys();\n        return items.map((row, index)=>{\n        return <tr key={index}><RenderRow key={index} data={row} keys={keys}/></tr>\n        })\n    }\n\n    return(\n    <React.Fragment>\n\n        <p>Table</p>\n        <table>\n            <thead>\n                <tr>{renderHeaders()}</tr>\n            </thead>\n            <tbody>\n                <tr>{renderValues()}</tr>\n            </tbody>                  \n        </table>\n    </React.Fragment> \n    )\n}\n\nexport default MainTable;  */\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":17},{"ruleId":"34","severity":1,"message":"38","line":4,"column":23,"nodeType":"36","messageId":"37","endLine":4,"endColumn":32},{"ruleId":"34","severity":1,"message":"39","line":4,"column":33,"nodeType":"36","messageId":"37","endLine":4,"endColumn":41},{"ruleId":"40","severity":1,"message":"41","line":26,"column":19,"nodeType":"42","messageId":"43","endLine":26,"endColumn":21},{"ruleId":"44","severity":1,"message":"45","line":65,"column":22,"nodeType":"46","endLine":65,"endColumn":68},{"ruleId":"40","severity":1,"message":"41","line":55,"column":71,"nodeType":"42","messageId":"43","endLine":55,"endColumn":73},{"ruleId":"44","severity":1,"message":"45","line":78,"column":26,"nodeType":"46","endLine":78,"endColumn":71},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'MainTable' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]